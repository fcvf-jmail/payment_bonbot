const { Scenes } = require("telegraf")
const path = require("path")
const { writeNewPaymentToBase, getChatIds } = require("../functions/baseFunctions")
var fs = require("fs")
const { baseFilePath } = require("../values")
const { writeNewPaymentToGoogleSheets } = require("../functions/googleSheets")
const { cancelAdding } = require("../functions/repliersFunctions")

module.exports = new Scenes.WizardScene("cashScene",
    ctx => {
        ctx.scene.session.state.payment = {id: JSON.parse(fs.readFileSync(baseFilePath, "utf-8")).nextId, nick: ctx.from.username, name: ctx.from.first_name, department: ctx.scene.session.state.department}
        ctx.reply("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞")
        return ctx.wizard.next()
    },
    ctx => {
        if(ctx.callbackQuery) return
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        ctx.scene.session.state.payment.date = ctx.message.text
        ctx.reply("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É")
        return ctx.wizard.next()
    },
    ctx => {
        if(ctx.callbackQuery) return
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        ctx.scene.session.state.payment.summ = ctx.message.text
        ctx.reply("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        return ctx.wizard.next()
    },
    ctx => {
        if(ctx.callbackQuery) return
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        ctx.scene.session.state.payment.reciver = ctx.message.text
        ctx.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞")
        return ctx.wizard.next()
    },
    ctx => {
        if(ctx.callbackQuery) return
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        ctx.scene.session.state.payment.destenation = ctx.message.text
        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã", {reply_markup: {inline_keyboard: [[{text: "–ù–∞–ª–∏—á–Ω—ã–µ", callback_data: "cash"}], [{text: "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data: "card"}]]}})
        return ctx.wizard.next()
    },
    ctx => {
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        if(!ctx.callbackQuery) {
            ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫")
            return ctx.wizard.selectStep(ctx.wizard.cursor - 1)
        }
        if(ctx.callbackQuery.data == "cash") {
            ctx.scene.session.state.payment.cardOrCash = "–ù–∞–ª–∏—á–Ω—ã–µ"
            ctx.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", {reply_markup: {inline_keyboard: [[{text: "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data: "empty"}]]}})
            return ctx.wizard.selectStep(ctx.wizard.cursor + 2)
        }
        if(ctx.callbackQuery.data == "card") {
            ctx.scene.session.state.payment.cardOrCash = "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É"
            ctx.reply("—É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return ctx.wizard.next()
        }
    },
    ctx => {
        if(ctx.callbackQuery) return
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        try {ctx.scene.session.state.payment.cardOrPhoneNumber = ctx.message.text} catch(err) {}
        ctx.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", {reply_markup: {inline_keyboard: [[{text: "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data: "empty"}]]}})
        return ctx.wizard.next()
    },
    ctx => {
        console.log(ctx.scene.session.state.payment);
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        if(!ctx.callbackQuery) ctx.scene.session.state.payment.comment = ctx.message.text
        var { id, name, department, date, summ, reciver, destenation, cardOrCash, cardOrPhoneNumber, comment } = ctx.scene.session.state.payment
        var text = `üíº –û—Ç–¥–µ–ª: ${department}\nüë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${name}\nüìÜ –î–∞—Ç–∞: ${date}\nüí∞ –°—É–º–º–∞: ${summ}\n\üü¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ò–≤–∞–Ω–æ–≤ –Æ.–ê\n\üë®‚Äçüíº–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${reciver}\nüìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${destenation}\nüßÆ –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã: ${cardOrCash}${typeof cardOrPhoneNumber != "undefined" ? `\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${cardOrPhoneNumber}` : ""}${typeof comment != "undefined" ? `\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}` : ""}`
        const departmentBaseName = department == "–ë—ã—Ç–æ–≤–∫–∏" ? "bitovki" : "mebel"
        for(var user of getChatIds(departmentBaseName, "usersToSendCash")) try {ctx.telegram.sendMessage(user.chatId, text, {reply_markup: {inline_keyboard: [[{text: "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", callback_data: "accepetedBy"+id}], [{text: "–ù–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", callback_data: "deniedBy"+id}]]}}).catch(err => {console.log(err, "cash.js - 74")})} catch(err){console.log(err, "cash.js - 74")} 
        writeNewPaymentToBase(text, departmentBaseName, "–ù–∞–ª–∏—á–Ω—ã–µ")
        writeNewPaymentToGoogleSheets("–ù–∞–ª–∏—á–Ω—ã–µ", [id, date, department, name, summ, reciver, destenation, cardOrCash, typeof cardOrPhoneNumber != "undefined" ? cardOrPhoneNumber : "", typeof comment != "undefined" ? comment : ""])
        ctx.reply("–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")
        ctx.scene.leave()
    }
)