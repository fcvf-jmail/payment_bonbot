const { Scenes } = require("telegraf")
var fs = require("fs")
const { baseFilePath } = require("../values")
const { writeNewPaymentToBase, getChatIds } = require("../functions/baseFunctions")
const { writeNewPaymentToGoogleSheets } = require("../functions/googleSheets")
const { cancelAdding } = require("../functions/repliersFunctions")

module.exports = new Scenes.WizardScene("ipScene", 
    ctx => {
        ctx.scene.session.state.payment = {id: JSON.parse(fs.readFileSync(baseFilePath, "utf-8")).nextId, nick: ctx.from.username, name: ctx.from.first_name, department: ctx.scene.session.state.department}
        console.log(ctx.scene.session.state.payment);
        ctx.reply("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", {reply_markup: {inline_keyboard: [[{text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "continue"}]]}})
        return ctx.wizard.next()
    },
    ctx => {
        console.log(ctx.scene.session.state.payment);
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        try{if(ctx.message.document) ctx.scene.session.state.payment.document = ctx.message.document.file_id} catch(err) {}
        try{if(ctx.message.photo) ctx.scene.session.state.payment.photo = ctx.message.photo.sort(a => -a.file_size)[0].file_id} catch(err) {}
        if(ctx.callbackQuery) {
            if(ctx.callbackQuery.data != "continue") return
            ctx.reply("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            ctx.wizard.next()
        }
    },
    ctx => {
        console.log(ctx.scene.session.state.payment);
        if(ctx.callbackQuery) return
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        ctx.scene.session.state.payment.date = ctx.message.text
        ctx.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        ctx.wizard.next()
    },
    ctx => {
        console.log(ctx.scene.session.state.payment);
        if(ctx.callbackQuery) return
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        ctx.scene.session.state.payment.number = ctx.message.text
        ctx.reply("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É")
        ctx.wizard.next()
    },
    ctx => {
        console.log(ctx.scene.session.state.payment);
        if(ctx.callbackQuery) return
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        ctx.scene.session.state.payment.summ = ctx.message.text
        ctx.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")
        ctx.wizard.next()
    },
    ctx => {
        console.log(ctx.scene.session.state.payment);
        if(ctx.callbackQuery) return
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        ctx.scene.session.state.payment.conteragent = ctx.message.text
        ctx.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞")
        ctx.wizard.next()
    },
    ctx => {
        console.log(ctx.scene.session.state.payment);
        if(ctx.callbackQuery) return
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        ctx.scene.session.state.payment.destenation = ctx.message.text
        ctx.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", {reply_markup: {inline_keyboard: [[{text: "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data: "empty"}]]}})
        return ctx.wizard.next()
    },
    ctx => {
        console.log(ctx.scene.session.state.payment);
        try {if(ctx.message.text == "/cancel") return cancelAdding(ctx)} catch(err) {}
        if(!ctx.callbackQuery) ctx.scene.session.state.payment.comment = ctx.message.text
        var { id, name, department, document, photo, date, number, summ, conteragent, destenation, comment } = ctx.scene.session.state.payment
        var ipOrLlc = ctx.scene.session.state.ipOrLlc
        var text = `üíº –û—Ç–¥–µ–ª: ${department}\nüë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${name}\nüìÜ –î–∞—Ç–∞: ${date}\nüìÉ –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${number}\nüí∞ –°—É–º–º–∞: ${summ}\nüü¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${ipOrLlc == "–û–û–û" ? "–û–û–û –ë–û–ù-–ì–†–£–ü–ü" : "–ò–ü –ò–≤–∞–Ω–æ–≤ –Æ—Ä–∏–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á"}\n\üë®‚Äçüíº–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${conteragent}\nüìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${destenation}${typeof comment != "undefined" ? `\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}` : ""}`
        const departmentBaseName = department == "–ë—ã—Ç–æ–≤–∫–∏" ? "bitovki" : "mebel"
        if(document) for(var user of getChatIds(departmentBaseName, "usersToSendIpOrLlc")) try {ctx.telegram.sendDocument(user.chatId, document, {caption: text, reply_markup: {inline_keyboard: [[{text: "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", callback_data: "accepetedBy"+id}], [{text: "–ù–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", callback_data: "deniedBy"+id}]]}}).catch(err => {console.log(err, "ipOrLlc.js - 74")})} catch(err){console.log(err, "ipOrLlc.js - 74")} 
        if(photo) for(var user of getChatIds(departmentBaseName, "usersToSendIpOrLlc")) try {ctx.telegram.sendPhoto(user.chatId, photo, {caption: text, reply_markup: {inline_keyboard: [[{text: "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", callback_data: "accepetedBy"+id}], [{text: "–ù–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", callback_data: "deniedBy"+id}]]}}).catch(err => {console.log(err, "ipOrLlc.js - 75")})} catch(err){console.log(err, "ipOrLlc.js - 75")} 
        writeNewPaymentToBase(text, departmentBaseName, ipOrLlc, {document, photo})
        writeNewPaymentToGoogleSheets(ipOrLlc, [id, date, department, number, name, summ, conteragent, destenation, typeof comment != "undefined" ? comment : ""])
        ctx.reply("–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")
        ctx.scene.leave()
    }
)